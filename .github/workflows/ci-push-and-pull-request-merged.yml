name: "Build on Push & Release on merged PR"

on:
  push:
    branches:
      - feature/*
      - patch/*
      - issue/*
      - bug/*
  pull_request:
    branches:
      - main
    types:
      - closed

jobs:
  build-and-release:
    runs-on: windows-2022
    env:
      DevEnvDir: "C:\\Program Files\\Microsoft Visual Studio\\2022\\Enterprise\\Common7\\IDE\\"
      SolutionDir: ${{ github.workspace }}\src
      azureSignToolVersion: "6.0.0"
    permissions:
      contents: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          submodules: recursive
          token: ${{ secrets.DATAM8_FRONTEND_SUBMODULES_PAT }}
          fetch-depth: 0

      - name: Checkout solution respoitory
        uses: actions/checkout@v4
        with:
          repository: oraylis/automation-sample-solution
          token: ${{ secrets.DATAM8_SAMPLE_SOLUTION_PAT }}
          path: automation-sample-solution

      - name: Integrate latest version of sample solution
        run: |
          Copy-Item `
          -Path automation-sample-solution/Generate/* `
          -Destination src/Dm8Main/Solution/CreateNewProject/Generate/ `
          -Recurse `
          -Force

      - name: Create global.json file
        run: |
          echo '{
            "sdk": {
              "version": "8.0.406"
            }
          }' > global.json

      - name: Cache NuGet packages
        uses: actions/cache@v3
        with:
          path: ~/.nuget/packages
          key: nuget-${{ runner.os }}-${{ hashFiles('**/*.csproj', '**/packages.lock.json') }}
          restore-keys: |
            nuget-${{ runner.os }}-

      - name: Restore dependencies
        run: dotnet restore src/Dm8Main.sln

      - name: Build DataM8 Solution
        run: dotnet build src/Dm8Main.sln

      - name: Build Validator CLI for Linux
        run: |
          dotnet build src/Dm8Validate/Dm8Validate.csproj `
          -c Debug_Linux `
          -r linux-x64 `
          --self-contained

      - name: Install WIX
        run: |
          dotnet tool install --global wix

      - name: Add WIX dependencies
        run: wix.exe extension add -g WixToolset.UI.wixext/5.0.2

      - name: Build Setup
        run: dotnet build src/Dm8Setup/Dm8Setup.csproj

      - name: Extract project version from App.config
        if: github.event_name == 'pull_request'
        run: |
          $version = Select-String `
          -Path "src/Dm8Main/App.config" `
          -Pattern 'Version=(\d+\.\d+\.\d+)' | Select-Object `
          -First 1 | ForEach-Object { $_.Matches[0].Groups[1].Value }
          echo "VERSION=v$version" >> $env:GITHUB_ENV

      - name: Get latest tag version
        if: github.event_name == 'pull_request'
        run: |
          $LATEST_TAG=$(git tag --sort=-creatordate | Select-Object -First 1)
          if (-not $LATEST_TAG) {
            echo "LATEST_TAG_VERSION=NONE" >> $env:GITHUB_ENV
          } else {
            echo "LATEST_TAG_VERSION=$LATEST_TAG" >> $env:GITHUB_ENV
          }

      - name: Install Azure SignTool
        if: env.VERSION != env.LATEST_TAG_VERSION
        run: |
          dotnet tool install `
          --global AzureSignTool `
          --version ${{ env.azureSignToolVersion }}

      - name: Sign installer and executables
        if: env.VERSION != env.LATEST_TAG_VERSION
        run: |
          AzureSignTool sign `
            -kvt ${{ secrets.AZURE_KEY_VAULT_TENANT }} `
            -kvu ${{ secrets.AZURE_KEY_VAULT_URL }} `
            -kvi ${{ secrets.AZURE_KEY_VAULT_ID }} `
            -kvs ${{ secrets.AZURE_KEY_VAULT_SECRET }} `
            -kvc ${{ secrets.AZURE_KEY_VAULT_NAME }} `
            -tr http://timestamp.digicert.com `
            -v `
            "src/Dm8Setup/bin/Debug/ORAYLIS DataM8.msi" `
            src/Dm8Main/bin/Debug/net8.0-windows7.0/Dm8Main.exe `
            src/Dm8Validate/bin/Debug/net8.0/Dm8Validate.exe

      - name: Zip DataM8
        if: env.VERSION != env.LATEST_TAG_VERSION
        run: |
          Compress-Archive `
          -Path src/Dm8Main/bin/Debug/net8.0-windows7.0/* `
          -DestinationPath src/DataM8.win-x64.zip

      - name: Zip DataM8 Validator for Windows
        if: env.VERSION != env.LATEST_TAG_VERSION
        run: |
          Compress-Archive `
          -Path src/Dm8Validate/bin/Debug/net8.0/* `
          -DestinationPath src/DataM8Validate.win-x64.zip

      - name: Zip DataM8 Validator for Linux
        if: env.VERSION != env.LATEST_TAG_VERSION
        run: |
          Compress-Archive `
          -Path src/Dm8Validate/bin/Debug_Linux/net8.0/linux-x64/* `
          -DestinationPath src/DataM8Validate.linux-x64.zip

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        if: env.VERSION != env.LATEST_TAG_VERSION
        with:
          tag_name: ${{ env.VERSION }}
          generate_release_notes: true
          files: |
            src/DataM8.win-x64.zip
            src/DataM8Validate.win-x64.zip
            src/DataM8Validate.linux-x64.zip
            src/Dm8Setup/bin/Debug/*.msi
