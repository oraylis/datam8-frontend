name: "Build on Push & Release on merged PR"

on:
  pull_request:
    branches:
      - main
      - dev
    types:
      - closed

jobs:
  build:
    runs-on: windows-2022
    env:
      DevEnvDir: "C:\\Program Files\\Microsoft Visual Studio\\2022\\Enterprise\\Common7\\IDE\\"
      SolutionDir: ${{ github.workspace }}\src
      azureSignToolVersion: "6.0.0"
    permissions:
      contents: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          submodules: recursive
          fetch-depth: 1

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.13'

      - name: Set up uv
        uses: astral-sh/setup-uv@v5
        with:
          version: '0.6.12'

      - uses: actions/setup-dotnet@v4
        with:
          dotnet-version: |
            9.0.x
            8.0.x

      - name: Checkout solution respoitory
        uses: actions/checkout@v4
        with:
          repository: oraylis/datam8-sample-solution
          path: datam8-sample-solution

      - name: Integrate latest version of sample solution
        run: |
          Copy-Item `
          -Path datam8-sample-solution/Generate/* `
          -Destination src/Dm8Main/Solution/CreateNewProject/Generate/ `
          -Recurse `
          -Force

      - name: Cache NuGet packages
        uses: actions/cache@v3
        with:
          path: ~/.nuget/packages
          key: nuget-${{ runner.os }}-${{ hashFiles('**/*.csproj', '**/packages.lock.json') }}
          restore-keys: |
            nuget-${{ runner.os }}-

      - name: Restore dependencies
        run: dotnet restore src/Dm8Main.sln

      - name: Build DataM8 Solution
        # INFO: build the Dm8Build projects once before otherwise references
        # to DLLs are not working
        run: |
          dotnet build src/Dm8Build
          dotnet build src/Dm8Main.sln

      - name: Build DataM8 Generator
        working-directory: ./datam8-generator
        run: uv build

      - name: Post Build Script
        run: |
          .\Dm8PostBuildScript.ps1

      - name: Build Validator CLI for Linux
        run: |
          dotnet build src/Dm8Validate/Dm8Validate.csproj `
          -c Debug_Linux `
          -r linux-x64 `
          --self-contained

      - name: Extract project version from App.config
        id: extractVersion
        run: |
          $version_string = select-string `
            -path .\src\Dm8Main\App.config `
            -pattern 'Key="Version"'

          if ($version_string -match 'value="(\d+.\d+.\d+)"') {
            write-output "FRONTEND_VERSION=v$($matches[1])" >> $env:GITHUB_ENV
          } else {
            write-error "Could not find a valid version"
          }
          echo "version=$version_string" >> "$GITHUB_OUTPUT"

      - name: Get latest tag version
        run: |
          $LATEST_TAG=$(gh release list -L 1 --json tagName `
            --exclude-drafts --exclude-pre-releases --jq '.[].tagName'
            )
          echo "LATEST_TAG_VERSION=$LATEST_TAG" >> $env:GITHUB_ENV
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          OWNER: ${{ github.repository_owner }}
          REPO: ${{ github.event.repository.name }}

      - name: Install Azure SignTool
        run: |
          dotnet tool install `
          --global AzureSignTool `
          --version ${{ env.azureSignToolVersion }}

      - name: Sign executables
        run: |
          AzureSignTool sign `
            -kvt ${{ secrets.AZURE_KEY_VAULT_TENANT }} `
            -kvu ${{ secrets.AZURE_KEY_VAULT_URL }} `
            -kvi ${{ secrets.AZURE_KEY_VAULT_ID }} `
            -kvs ${{ secrets.AZURE_KEY_VAULT_SECRET }} `
            -kvc ${{ secrets.AZURE_KEY_VAULT_NAME }} `
            -tr http://timestamp.digicert.com `
            -v `
            src/Dm8Main/bin/Debug/net8.0-windows7.0/Dm8Main.exe `
            src/Dm8Validate/bin/Debug/net8.0/Dm8Validate.exe

      - name: Install WIX & dependencies
        run: |
          dotnet tool install wix --version '5.0.1' --global
          wix.exe extension add -g WixToolset.UI.wixext/5.0.2

      - name: Build Setup
        run: dotnet build src/Dm8Setup/Dm8Setup.csproj

      - name: Sign installer
        run: |
          AzureSignTool sign `
            -kvt ${{ secrets.AZURE_KEY_VAULT_TENANT }} `
            -kvu ${{ secrets.AZURE_KEY_VAULT_URL }} `
            -kvi ${{ secrets.AZURE_KEY_VAULT_ID }} `
            -kvs ${{ secrets.AZURE_KEY_VAULT_SECRET }} `
            -kvc ${{ secrets.AZURE_KEY_VAULT_NAME }} `
            -tr http://timestamp.digicert.com `
            -v `
            "src/Dm8Setup/bin/Debug/ORAYLIS DataM8.msi"

      - name: Zip DataM8
        run: |
          Compress-Archive `
          -Path src/Dm8Main/bin/Debug/net8.0-windows7.0/* `
          -DestinationPath src/DataM8.win-x64.zip

      - name: Zip DataM8 Validator for Windows
        run: |
          Compress-Archive `
          -Path src/Dm8Validate/bin/Debug/net8.0/* `
          -DestinationPath src/DataM8Validate.win-x64.zip

      - name: Zip DataM8 Validator for Linux
        run: |
          Compress-Archive `
          -Path src/Dm8Validate/bin/Debug_Linux/net8.0/linux-x64/* `
          -DestinationPath src/DataM8Validate.linux-x64.zip

      - uses: actions/upload-artifact@v4
        with:
          if-no-files-found: error
          retention-days: 1
          name: zips
          path: src/*.zip

      - uses: actions/upload-artifact@v4
        with:
          if-no-files-found: error
          retention-days: 1
          name: msi
          path: src/Dm8Setup/bin/Debug/*.msi

    outputs:
      version: ${{ steps.extractVersion.outputs.version }}

  release:
    needs: [build]
    runs-on: windows-2022
    # INFO: if not explicitly checked this job will run if a PR is simply
    # closed and not merged
    if: github.event.pull_request.merged == true
    permissions:
      contents: write

    steps:
      - uses: actions/download-artifacts@v4

      - run: |
          echo $VERSION
      # - name: Create GitHub Release (main)
      #   if: github.ref == 'refs/heads/main'
      #   uses: softprops/action-gh-release@v2
      #   env:
      #     VERSION: ${{ needs.build.outputs.version }}
      #   with:
      #     tag_name: ${{ env.VERSION }}
      #     generate_release_notes: true
      #     files: |
      #       src/DataM8.win-x64.zip
      #       src/DataM8Validate.win-x64.zip
      #       src/DataM8Validate.linux-x64.zip
      #       src/Dm8Setup/bin/Debug/*.msi

      - name: Create GitHub Release (dev)
        if: github.ref == 'refs/heads/dev'
        uses: softprops/action-gh-release@v2
        env:
          VERSION: ${{ needs.build.outputs.version }}
        with:
          tag_name: ${{ env.VERSION }}-beta
          generate_release_notes: true
          files: |
            zip/DataM8.win-x64.zip
            zip/DataM8Validate.win-x64.zip
            zip/DataM8Validate.linux-x64.zip
            msi/*.msi
