//----------------------
// <auto-generated>
//     Generated using the NJsonSchema v11.4.0.0 (Newtonsoft.Json v13.0.0.0) (http://NJsonSchema.org)
// </auto-generated>
//----------------------


namespace Dm8Data
{
    #pragma warning disable // Disable all warnings

    /// <summary>
    /// Defines abstract business orientated attribute definitions, e.g. an email address
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "11.4.0.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class AttributeType : Prism.Mvvm.BindableBase
    {
        private string _name;
        private string _displayName;
        private string _description;
        private string _defaultType;
        private int _defaultLength;
        private int _defaultPrecision;
        private int _defaultScale;
        private AttributeTypeHasUnit _hasUnit;
        private bool _canBeInRelation = false;
        private bool _isDefaultProperty = false;


        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Name    {
            get { return _name; }
            set { SetProperty(ref _name, value); }
        }

        [Newtonsoft.Json.JsonProperty("displayName", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string DisplayName    {
            get { return _displayName; }
            set { SetProperty(ref _displayName, value); }
        }

        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Description    {
            get { return _description; }
            set { SetProperty(ref _description, value); }
        }

        [Newtonsoft.Json.JsonProperty("defaultType", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string DefaultType    {
            get { return _defaultType; }
            set { SetProperty(ref _defaultType, value); }
        }

        [Newtonsoft.Json.JsonProperty("defaultLength", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int DefaultLength    {
            get { return _defaultLength; }
            set { SetProperty(ref _defaultLength, value); }
        }

        [Newtonsoft.Json.JsonProperty("defaultPrecision", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int DefaultPrecision    {
            get { return _defaultPrecision; }
            set { SetProperty(ref _defaultPrecision, value); }
        }

        [Newtonsoft.Json.JsonProperty("defaultScale", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int DefaultScale    {
            get { return _defaultScale; }
            set { SetProperty(ref _defaultScale, value); }
        }

        /// <summary>
        /// Defines if an attribute should define a unit, e.g. `Physical` for weight or `Currency` for price.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("hasUnit", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public AttributeTypeHasUnit HasUnit    {
            get { return _hasUnit; }
            set { SetProperty(ref _hasUnit, value); }
        }

        [Newtonsoft.Json.JsonProperty("canBeInRelation", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool CanBeInRelation    {
            get { return _canBeInRelation; }
            set { SetProperty(ref _canBeInRelation, value); }
        }

        [Newtonsoft.Json.JsonProperty("isDefaultProperty", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool IsDefaultProperty    {
            get { return _isDefaultProperty; }
            set { SetProperty(ref _isDefaultProperty, value); }
        }

    }

    /// <summary>
    /// Defines a class of data type to configure which `DataType` properties are relevant for a specific type.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "11.4.0.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class DataTypeDefinition : Prism.Mvvm.BindableBase
    {
        private string _name;
        private string _displayName;
        private string _description;
        private bool _hasCharLen = false;
        private bool _hasPrecision = false;
        private bool _hasScale = false;
        private string _parquetType;
        private string _sqlType;


        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Name    {
            get { return _name; }
            set { SetProperty(ref _name, value); }
        }

        [Newtonsoft.Json.JsonProperty("displayName", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string DisplayName    {
            get { return _displayName; }
            set { SetProperty(ref _displayName, value); }
        }

        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Description    {
            get { return _description; }
            set { SetProperty(ref _description, value); }
        }

        [Newtonsoft.Json.JsonProperty("hasCharLen", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool HasCharLen    {
            get { return _hasCharLen; }
            set { SetProperty(ref _hasCharLen, value); }
        }

        [Newtonsoft.Json.JsonProperty("hasPrecision", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool HasPrecision    {
            get { return _hasPrecision; }
            set { SetProperty(ref _hasPrecision, value); }
        }

        [Newtonsoft.Json.JsonProperty("hasScale", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool HasScale    {
            get { return _hasScale; }
            set { SetProperty(ref _hasScale, value); }
        }

        /// <summary>
        /// The actual parquet data type that this datam8 internal type will map to.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("parquetType", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string ParquetType    {
            get { return _parquetType; }
            set { SetProperty(ref _parquetType, value); }
        }

        /// <summary>
        /// The atual sql data type that this datam8 internal type will map to.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("sqlType", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string SqlType    {
            get { return _sqlType; }
            set { SetProperty(ref _sqlType, value); }
        }

    }

    /// <summary>
    /// Used to reference from any entity to a `Property`.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "11.4.0.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class PropertyReference : Prism.Mvvm.BindableBase
    {
        private string _type;
        private string _value;


        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Type    {
            get { return _type; }
            set { SetProperty(ref _type, value); }
        }

        [Newtonsoft.Json.JsonProperty("value", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Value    {
            get { return _value; }
            set { SetProperty(ref _value, value); }
        }

    }

    /// <summary>
    /// An attribute of a model entity.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "11.4.0.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class Attribute : Prism.Mvvm.BindableBase
    {
        private int _ordinalNumber;
        private string _name;
        private string _displayName;
        private string _description;
        private string _attributeType;
        private DataType _dataType = new DataType();
        private bool _isBusinessKey = false;
        private AttributeHistory _history;
        private string _unit;
        private System.Collections.Generic.ICollection<string> _refactorNames;
        private System.DateTimeOffset _dateModified;
        private System.DateTimeOffset _dateDeleted;
        private System.DateTimeOffset _dateAdded;
        private System.Collections.Generic.ICollection<PropertyReference> _properties;


        [Newtonsoft.Json.JsonProperty("ordinalNumber", Required = Newtonsoft.Json.Required.Always)]
        public int OrdinalNumber    {
            get { return _ordinalNumber; }
            set { SetProperty(ref _ordinalNumber, value); }
        }

        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Name    {
            get { return _name; }
            set { SetProperty(ref _name, value); }
        }

        [Newtonsoft.Json.JsonProperty("displayName", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string DisplayName    {
            get { return _displayName; }
            set { SetProperty(ref _displayName, value); }
        }

        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Description    {
            get { return _description; }
            set { SetProperty(ref _description, value); }
        }

        [Newtonsoft.Json.JsonProperty("attributeType", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string AttributeType    {
            get { return _attributeType; }
            set { SetProperty(ref _attributeType, value); }
        }

        [Newtonsoft.Json.JsonProperty("dataType", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public DataType DataType    {
            get { return _dataType; }
            set { SetProperty(ref _dataType, value); }
        }

        [Newtonsoft.Json.JsonProperty("isBusinessKey", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool IsBusinessKey    {
            get { return _isBusinessKey; }
            set { SetProperty(ref _isBusinessKey, value); }
        }

        /// <summary>
        /// Defines how an attribute in a slowly chaning dimension should behave.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("history", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public AttributeHistory History    {
            get { return _history; }
            set { SetProperty(ref _history, value); }
        }

        [Newtonsoft.Json.JsonProperty("unit", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Unit    {
            get { return _unit; }
            set { SetProperty(ref _unit, value); }
        }

        [Newtonsoft.Json.JsonProperty("refactorNames", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string> RefactorNames    {
            get { return _refactorNames; }
            set { SetProperty(ref _refactorNames, value); }
        }

        [Newtonsoft.Json.JsonProperty("dateModified", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset DateModified    {
            get { return _dateModified; }
            set { SetProperty(ref _dateModified, value); }
        }

        [Newtonsoft.Json.JsonProperty("dateDeleted", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset DateDeleted    {
            get { return _dateDeleted; }
            set { SetProperty(ref _dateDeleted, value); }
        }

        [Newtonsoft.Json.JsonProperty("dateAdded", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public System.DateTimeOffset DateAdded    {
            get { return _dateAdded; }
            set { SetProperty(ref _dateAdded, value); }
        }

        [Newtonsoft.Json.JsonProperty("properties", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<PropertyReference> Properties    {
            get { return _properties; }
            set { SetProperty(ref _properties, value); }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "11.4.0.0 (Newtonsoft.Json v13.0.0.0)")]
    public enum AttributeTypeHasUnit
    {

        [System.Runtime.Serialization.EnumMember(Value = @"NoUnit")]
        NoUnit = 0,


        [System.Runtime.Serialization.EnumMember(Value = @"Physical")]
        Physical = 1,


        [System.Runtime.Serialization.EnumMember(Value = @"Currency")]
        Currency = 2,


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "11.4.0.0 (Newtonsoft.Json v13.0.0.0)")]
    public enum AttributeHistory
    {

        [System.Runtime.Serialization.EnumMember(Value = @"SCD0")]
        SCD0 = 0,


        [System.Runtime.Serialization.EnumMember(Value = @"SCD1")]
        SCD1 = 1,


        [System.Runtime.Serialization.EnumMember(Value = @"SCD2")]
        SCD2 = 2,


        [System.Runtime.Serialization.EnumMember(Value = @"SCD3")]
        SCD3 = 3,


        [System.Runtime.Serialization.EnumMember(Value = @"SCD4")]
        SCD4 = 4,


    }
}