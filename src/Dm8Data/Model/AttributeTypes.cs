/* DataM8
 * Copyright (C) 2024-2025 ORAYLIS GmbH
 *
 * This file is part of DataM8.
 *
 * DataM8 is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * DataM8 is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program. If not, see <https://www.gnu.org/licenses/>.
 */

// Generated by DataM8
//----------------------
// <auto-generated>
//     Generated using the NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.3.0) (http://NJsonSchema.org)
// </auto-generated>
//----------------------


#nullable enable


namespace Dm8Data.AttributeTypes
{
    #pragma warning disable // Disable all warnings

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "11.1.0.0 (Newtonsoft.Json v13.0.3.0)")]
    public partial class AttributeType : Prism.Mvvm.BindableBase
    {
        private string _name = default!;
        private string _displayName = default!;
        private string? _purpose = default!;
        private string? _explanation = default!;
        private string _defaultType = default!;
        private int? _defaultLength = default!;
        private int? _defaultPrecision = default!;
        private int? _defaultScale = default!;
        private AttributeTypeHasUnit? _hasUnit = default!;
        private AttributeTypeIsUnit? _isUnit = default!;
        private bool? _canBeInRelation = false;
        private bool? _isDefaultProperty = false;

        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Name
        {
            get { return _name; }

            set { SetProperty(ref _name, value); }
        }

        [Newtonsoft.Json.JsonProperty("displayName", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string DisplayName
        {
            get { return _displayName; }

            set { SetProperty(ref _displayName, value); }
        }

        [Newtonsoft.Json.JsonProperty("purpose", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Purpose
        {
            get { return _purpose; }

            set { SetProperty(ref _purpose, value); }
        }

        [Newtonsoft.Json.JsonProperty("explanation", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Explanation
        {
            get { return _explanation; }

            set { SetProperty(ref _explanation, value); }
        }

        [Newtonsoft.Json.JsonProperty("defaultType", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string DefaultType
        {
            get { return _defaultType; }

            set { SetProperty(ref _defaultType, value); }
        }

        [Newtonsoft.Json.JsonProperty("defaultLength", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? DefaultLength
        {
            get { return _defaultLength; }

            set { SetProperty(ref _defaultLength, value); }
        }

        [Newtonsoft.Json.JsonProperty("defaultPrecision", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? DefaultPrecision
        {
            get { return _defaultPrecision; }

            set { SetProperty(ref _defaultPrecision, value); }
        }

        [Newtonsoft.Json.JsonProperty("defaultScale", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? DefaultScale
        {
            get { return _defaultScale; }

            set { SetProperty(ref _defaultScale, value); }
        }

        [Newtonsoft.Json.JsonProperty("hasUnit", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public AttributeTypeHasUnit? HasUnit
        {
            get { return _hasUnit; }

            set { SetProperty(ref _hasUnit, value); }
        }

        [Newtonsoft.Json.JsonProperty("isUnit", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public AttributeTypeIsUnit? IsUnit
        {
            get { return _isUnit; }

            set { SetProperty(ref _isUnit, value); }
        }

        [Newtonsoft.Json.JsonProperty("canBeInRelation", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? CanBeInRelation
        {
            get { return _canBeInRelation; }

            set { SetProperty(ref _canBeInRelation, value); }
        }

        [Newtonsoft.Json.JsonProperty("isDefaultProperty", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? IsDefaultProperty
        {
            get { return _isDefaultProperty; }

            set { SetProperty(ref _isDefaultProperty, value); }
        }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "11.1.0.0 (Newtonsoft.Json v13.0.3.0)")]
    public partial class AttributeTypes : Prism.Mvvm.BindableBase
    {
        private string? _schema = default!;
        private AttributeTypesType? _type = default!;
        private System.Collections.ObjectModel.ObservableCollection<AttributeType>? _items = default!;

        [Newtonsoft.Json.JsonProperty("$schema", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Schema
        {
            get { return _schema; }

            set { SetProperty(ref _schema, value); }
        }

        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public AttributeTypesType? Type
        {
            get { return _type; }

            set { SetProperty(ref _type, value); }
        }

        [Newtonsoft.Json.JsonProperty("items", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.ObjectModel.ObservableCollection<AttributeType>? Items
        {
            get { return _items; }

            set { SetProperty(ref _items, value); }
        }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "11.1.0.0 (Newtonsoft.Json v13.0.3.0)")]
    public enum AttributeTypeHasUnit
    {

        [System.Runtime.Serialization.EnumMember(Value = @"NoUnit")]
        NoUnit = 0,


        [System.Runtime.Serialization.EnumMember(Value = @"Physical")]
        Physical = 1,


        [System.Runtime.Serialization.EnumMember(Value = @"Currency")]
        Currency = 2,


        [System.Runtime.Serialization.EnumMember(Value = @"UnitFree")]
        UnitFree = 3,


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "11.1.0.0 (Newtonsoft.Json v13.0.3.0)")]
    public enum AttributeTypeIsUnit
    {

        [System.Runtime.Serialization.EnumMember(Value = @"NoUnit")]
        NoUnit = 0,


        [System.Runtime.Serialization.EnumMember(Value = @"Physical")]
        Physical = 1,


        [System.Runtime.Serialization.EnumMember(Value = @"Currency")]
        Currency = 2,


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "11.1.0.0 (Newtonsoft.Json v13.0.3.0)")]
    public enum AttributeTypesType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"attributeType")]
        AttributeType = 0,


    }
}
