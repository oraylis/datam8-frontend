/* DataM8
 * Copyright (C) 2024-2025 ORAYLIS GmbH
 *
 * This file is part of DataM8.
 *
 * DataM8 is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * DataM8 is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program. If not, see <https://www.gnu.org/licenses/>.
 */

//----------------------
// <auto-generated>
//     Generated using the NJsonSchema v11.4.0.0 (Newtonsoft.Json v13.0.0.0) (http://NJsonSchema.org)
// </auto-generated>
//----------------------


namespace Dm8Data
{
    #pragma warning disable // Disable all warnings

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "11.4.0.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class BaseEntities : Prism.Mvvm.BindableBase
    {
        private object _type;
        private System.Collections.Generic.ICollection<ModelEntities> _modelEntities = new System.Collections.ObjectModel.Collection<ModelEntities>();


        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public object Type    {
            get { return _type; }
            set { SetProperty(ref _type, value); }
        }

        [Newtonsoft.Json.JsonProperty("modelEntities", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<ModelEntities> ModelEntities    {
            get { return _modelEntities; }
            set { SetProperty(ref _modelEntities, value); }
        }

    }

    /// <summary>
    /// Describes a single entity within datam8. Most commonly a database table.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "11.4.0.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class ModelEntities : Prism.Mvvm.BindableBase
    {
        private int _id;
        private string _name;
        private string _displayName;
        private string _description;
        private System.Collections.Generic.ICollection<ModelParameter> _parameters;
        private System.Collections.Generic.ICollection<Attributes> _attributes = new System.Collections.ObjectModel.Collection<Attributes>();
        private System.Collections.Generic.ICollection<Properties> _properties;
        private System.Collections.Generic.ICollection<InternalModelSource> _sources = new System.Collections.ObjectModel.Collection<InternalModelSource>();
        private System.Collections.Generic.ICollection<ModelTransformation> _transformations = new System.Collections.ObjectModel.Collection<ModelTransformation>();


        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Always)]
        public int Id    {
            get { return _id; }
            set { SetProperty(ref _id, value); }
        }

        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Name    {
            get { return _name; }
            set { SetProperty(ref _name, value); }
        }

        [Newtonsoft.Json.JsonProperty("displayName", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string DisplayName    {
            get { return _displayName; }
            set { SetProperty(ref _displayName, value); }
        }

        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Description    {
            get { return _description; }
            set { SetProperty(ref _description, value); }
        }

        [Newtonsoft.Json.JsonProperty("parameters", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<ModelParameter> Parameters    {
            get { return _parameters; }
            set { SetProperty(ref _parameters, value); }
        }

        [Newtonsoft.Json.JsonProperty("attributes", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.MinLength(1)]
        public System.Collections.Generic.ICollection<Attributes> Attributes    {
            get { return _attributes; }
            set { SetProperty(ref _attributes, value); }
        }

        [Newtonsoft.Json.JsonProperty("properties", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<Properties> Properties    {
            get { return _properties; }
            set { SetProperty(ref _properties, value); }
        }

        [Newtonsoft.Json.JsonProperty("sources", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.MinLength(1)]
        public System.Collections.Generic.ICollection<InternalModelSource> Sources    {
            get { return _sources; }
            set { SetProperty(ref _sources, value); }
        }

        /// <summary>
        /// List of transformations that will be executed in order of stepNo.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("transformations", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.MinLength(1)]
        public System.Collections.Generic.ICollection<ModelTransformation> Transformations    {
            get { return _transformations; }
            set { SetProperty(ref _transformations, value); }
        }

    }

    /// <summary>
    /// Used to reference from any entity to a `Property`.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "11.4.0.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class Properties : Prism.Mvvm.BindableBase
    {
        private string _property;
        private string _value;


        [Newtonsoft.Json.JsonProperty("property", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Property    {
            get { return _property; }
            set { SetProperty(ref _property, value); }
        }

        [Newtonsoft.Json.JsonProperty("value", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Value    {
            get { return _value; }
            set { SetProperty(ref _value, value); }
        }

    }

    /// <summary>
    /// An datam8 abstract internal data type.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "11.4.0.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class SourceDataType : Prism.Mvvm.BindableBase
    {
        private string _type;
        private bool _nullable = true;
        private int _charLen;
        private int _precision;
        private int _scale;


        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Type    {
            get { return _type; }
            set { SetProperty(ref _type, value); }
        }

        [Newtonsoft.Json.JsonProperty("nullable", Required = Newtonsoft.Json.Required.Always)]
        public bool Nullable    {
            get { return _nullable; }
            set { SetProperty(ref _nullable, value); }
        }

        [Newtonsoft.Json.JsonProperty("charLen", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int CharLen    {
            get { return _charLen; }
            set { SetProperty(ref _charLen, value); }
        }

        [Newtonsoft.Json.JsonProperty("precision", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int Precision    {
            get { return _precision; }
            set { SetProperty(ref _precision, value); }
        }

        [Newtonsoft.Json.JsonProperty("scale", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int Scale    {
            get { return _scale; }
            set { SetProperty(ref _scale, value); }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "11.4.0.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class Function : Prism.Mvvm.BindableBase
    {
        private string _source;


        [Newtonsoft.Json.JsonProperty("source", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Source    {
            get { return _source; }
            set { SetProperty(ref _source, value); }
        }

    }

    /// <summary>
    /// An attribute of a model entity.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "11.4.0.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class Attributes : Prism.Mvvm.BindableBase
    {
        private int _ordinalNumber;
        private string _name;
        private string _displayName;
        private string _description;
        private string _attributeType;
        private SourceDataType _dataType = new SourceDataType();
        private bool _isBusinessKey = false;
        private AttributesHistory _history;
        private string _unit;
        private System.Collections.Generic.ICollection<string> _refactorNames;
        private System.DateTimeOffset _dateModified;
        private System.DateTimeOffset _dateDeleted;
        private System.DateTimeOffset _dateAdded;
        private System.Collections.Generic.ICollection<Properties> _properties;


        [Newtonsoft.Json.JsonProperty("ordinalNumber", Required = Newtonsoft.Json.Required.Always)]
        public int OrdinalNumber    {
            get { return _ordinalNumber; }
            set { SetProperty(ref _ordinalNumber, value); }
        }

        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Name    {
            get { return _name; }
            set { SetProperty(ref _name, value); }
        }

        [Newtonsoft.Json.JsonProperty("displayName", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string DisplayName    {
            get { return _displayName; }
            set { SetProperty(ref _displayName, value); }
        }

        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Description    {
            get { return _description; }
            set { SetProperty(ref _description, value); }
        }

        [Newtonsoft.Json.JsonProperty("attributeType", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string AttributeType    {
            get { return _attributeType; }
            set { SetProperty(ref _attributeType, value); }
        }

        [Newtonsoft.Json.JsonProperty("dataType", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public SourceDataType DataType    {
            get { return _dataType; }
            set { SetProperty(ref _dataType, value); }
        }

        [Newtonsoft.Json.JsonProperty("isBusinessKey", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool IsBusinessKey    {
            get { return _isBusinessKey; }
            set { SetProperty(ref _isBusinessKey, value); }
        }

        /// <summary>
        /// Defines how an attribute in a slowly chaning dimension should behave.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("history", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public AttributesHistory History    {
            get { return _history; }
            set { SetProperty(ref _history, value); }
        }

        [Newtonsoft.Json.JsonProperty("unit", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Unit    {
            get { return _unit; }
            set { SetProperty(ref _unit, value); }
        }

        [Newtonsoft.Json.JsonProperty("refactorNames", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string> RefactorNames    {
            get { return _refactorNames; }
            set { SetProperty(ref _refactorNames, value); }
        }

        [Newtonsoft.Json.JsonProperty("dateModified", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset DateModified    {
            get { return _dateModified; }
            set { SetProperty(ref _dateModified, value); }
        }

        [Newtonsoft.Json.JsonProperty("dateDeleted", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset DateDeleted    {
            get { return _dateDeleted; }
            set { SetProperty(ref _dateDeleted, value); }
        }

        [Newtonsoft.Json.JsonProperty("dateAdded", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public System.DateTimeOffset DateAdded    {
            get { return _dateAdded; }
            set { SetProperty(ref _dateAdded, value); }
        }

        [Newtonsoft.Json.JsonProperty("properties", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<Properties> Properties    {
            get { return _properties; }
            set { SetProperty(ref _properties, value); }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "11.4.0.0 (Newtonsoft.Json v13.0.0.0)")]
    public enum AttributesHistory
    {

        [System.Runtime.Serialization.EnumMember(Value = @"SCD0")]
        SCD0 = 0,


        [System.Runtime.Serialization.EnumMember(Value = @"SCD1")]
        SCD1 = 1,


        [System.Runtime.Serialization.EnumMember(Value = @"SCD2")]
        SCD2 = 2,


        [System.Runtime.Serialization.EnumMember(Value = @"SCD3")]
        SCD3 = 3,


        [System.Runtime.Serialization.EnumMember(Value = @"SCD4")]
        SCD4 = 4,


    }
}