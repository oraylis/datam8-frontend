<#@ Import Namespace="System.Data.Common" #>
<#@ template debug="false" hostspecific="true" language="C#" #>
<#@ output extension=".cs" #>
<#@ assembly name="netstandard" #>
<#@ Assembly Name="System.Core" #>
<#@ Assembly Name="Microsoft.CSharp" #>
<#@ assembly name="System.Data" #>
<#@ assembly name="System.Data.Entity" #>
<#@ assembly name="System.Xml" #>
<#@ assembly name="System.Xml.Linq"#>
<#@ assembly name="System.Runtime.dll"#>
<#@ assembly name=".\Dm8Build\bin\Debug\net48\Newtonsoft.Json.dll" #>
<#@ assembly name=".\Dm8Build\bin\Debug\net48\NJsonSchema.dll" #>
<#@ assembly name=".\Dm8Build\bin\Debug\net48\NJsonSchema.CodeGeneration.dll" #>
<#@ assembly name=".\Dm8Build\bin\Debug\net48\NJsonSchema.CodeGeneration.CSharp.dll" #>
<#@ assembly name=".\Dm8Build\bin\Debug\net48\NJsonSchema.NewtonsoftJson.dll" #>
<#@ import namespace="System" #>
<#@ import namespace="System.Data" #>
<#@ import namespace="System.Data.Objects" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.IO" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.Data.Objects.DataClasses" #>
<#@ import namespace="System.Text.RegularExpressions" #>
<#@ import namespace="System.Globalization" #>
<#@ import namespace="System.Reflection" #>
<#@ import namespace="System.CodeDom" #>
<#@ import namespace="System.CodeDom.Compiler" #>
<#@ import namespace="Microsoft.CSharp"#>
<#@ import namespace="System.Text"#>
<#@ import namespace="Microsoft.VisualStudio.TextTemplating" #>
<#@ import namespace="NJsonSchema" #>
<#@ import namespace="Newtonsoft.Json.Schema" #>
<#@ import namespace="NJsonSchema.CodeGeneration.CSharp" #>
<#
	try
    { 
		string path = System.IO.Path.GetDirectoryName(Host.TemplateFile);
		string coreSchemaJson = File.ReadAllText(path + "\\..\\..\\..\\datam8-model\\schema\\CoreModelEntry.json");
        string httpsSchema = "http://dm8.com/schemas/core.json";
		string schemaJson = File.ReadAllText(path+"\\..\\Json\\CuratedModelEntry.json");
        schemaJson = schemaJson.Replace("CoreModelEntry.json", httpsSchema);

        NJsonSchema.JsonSchema coreSchema = NJsonSchema.JsonSchema.FromJsonAsync(coreSchemaJson).Result;
        coreSchema.Id = httpsSchema;
        Func<NJsonSchema.JsonSchema, JsonReferenceResolver> referenceResolverFactory = x =>
        {
            NJsonSchema.Generation.JsonSchemaResolver schemaResolver = new NJsonSchema.Generation.JsonSchemaResolver(x, new NJsonSchema.NewtonsoftJson.Generation.NewtonsoftJsonSchemaGeneratorSettings());
            JsonReferenceResolver referenceResolver = new JsonReferenceResolver(schemaResolver);
            referenceResolver.AddDocumentReference(httpsSchema, coreSchema);

            return referenceResolver;
        };

        var schema = NJsonSchema.JsonSchema.FromJsonAsync(schemaJson, "\\", referenceResolverFactory).Result;		
		var generator = new RemoveCoreSchemaCSharpGenerator(schema, new CSharpGeneratorSettings { 
			Namespace="Dm8Data.Curated", 
			GenerateDataAnnotations=true, 			
			ClassStyle = CSharpClassStyle.Prism, 
			GenerateOptionalPropertiesAsNullable = true, 
			ArrayBaseType = "System.Collections.ObjectModel.ObservableCollection",
			ArrayType = "System.Collections.ObjectModel.ObservableCollection" 
		});
        
		var file = generator.GenerateFile("ModelEntry");
        file = file.Replace("<Source>", "<Dm8Data.Core.SourceEntity>");
        file = file.Replace(" Entity ", " Dm8Data.Core.CoreEntity ");
		file = "// Generated by DataM8\n" + file; 
    	WriteLine(file);      
    }
	catch(Exception ex)
    {
		WriteLine("// Exception "+ex.Message);
		WriteLine("/* Details:");
		WriteLine(ex.ToString());
		WriteLine("*/");
    }
#>
<#+
    public class RemoveCoreSchemaCSharpGenerator : CSharpGenerator

    {
        public RemoveCoreSchemaCSharpGenerator(object rootObject, CSharpGeneratorSettings cSharpGeneratorSettings) : base(rootObject, cSharpGeneratorSettings)
        {
        }

        protected override NJsonSchema.CodeGeneration.CodeArtifact GenerateType(NJsonSchema.JsonSchema schema, string typeNameHint)
        {
            var rc = base.GenerateType(schema, typeNameHint);
            if (schema.ParentSchema != null &&
                schema.ParentSchema.Id == "http://dm8.com/schemas/core.json")
            {
                rc = new NJsonSchema.CodeGeneration.CodeArtifact(rc.TypeName, rc.Type, rc.Language, rc.Category, "");

            }
            return rc;
        }
    }
#>