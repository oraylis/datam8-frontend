//----------------------
// <auto-generated>
//     Generated using the NJsonSchema v11.4.0.0 (Newtonsoft.Json v13.0.0.0) (http://NJsonSchema.org)
// </auto-generated>
//----------------------


namespace Dm8Data
{
    #pragma warning disable // Disable all warnings

    /// <summary>
    /// A mapping of datatypes name in the source to datam8 internal datatype names.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "11.4.0.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class SourceDataTypeMapping : Prism.Mvvm.BindableBase
    {
        private string _sourceType;
        private string _targetType;


        /// <summary>
        /// Source system data type
        /// </summary>
        [Newtonsoft.Json.JsonProperty("sourceType", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string SourceType    {
            get { return _sourceType; }
            set { SetProperty(ref _sourceType, value); }
        }

        /// <summary>
        /// Target system data type
        /// </summary>
        [Newtonsoft.Json.JsonProperty("targetType", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string TargetType    {
            get { return _targetType; }
            set { SetProperty(ref _targetType, value); }
        }

    }

    /// <summary>
    /// A property or setting defined by a data source type, which is then available when defining concret data sources.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "11.4.0.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class ConnectionProperty : Prism.Mvvm.BindableBase
    {
        private string _name;
        private bool _required;
        private string _description;


        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Name    {
            get { return _name; }
            set { SetProperty(ref _name, value); }
        }

        [Newtonsoft.Json.JsonProperty("required", Required = Newtonsoft.Json.Required.Always)]
        public bool Required    {
            get { return _required; }
            set { SetProperty(ref _required, value); }
        }

        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Description    {
            get { return _description; }
            set { SetProperty(ref _description, value); }
        }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// Defines groups of data sources that base on their technology, e.g. `SqlServer` or `Oracle`
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "11.4.0.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class DataSourceType : Prism.Mvvm.BindableBase
    {
        private string _name;
        private string _displayName;
        private string _description;
        private System.Collections.Generic.ICollection<SourceDataTypeMapping> _dataTypeMapping = new System.Collections.ObjectModel.Collection<SourceDataTypeMapping>();
        private System.Collections.Generic.ICollection<ConnectionProperty> _connectionProperties;


        /// <summary>
        /// Name of the data source type (e.g., SqlDataSource, LakeSource)
        /// </summary>
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Name    {
            get { return _name; }
            set { SetProperty(ref _name, value); }
        }

        /// <summary>
        /// Human-readable display name
        /// </summary>
        [Newtonsoft.Json.JsonProperty("displayName", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string DisplayName    {
            get { return _displayName; }
            set { SetProperty(ref _displayName, value); }
        }

        /// <summary>
        /// Description of the data source type
        /// </summary>
        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Description    {
            get { return _description; }
            set { SetProperty(ref _description, value); }
        }

        /// <summary>
        /// Default data type mappings for this source type
        /// </summary>
        [Newtonsoft.Json.JsonProperty("dataTypeMapping", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.MinLength(1)]
        public System.Collections.Generic.ICollection<SourceDataTypeMapping> DataTypeMapping    {
            get { return _dataTypeMapping; }
            set { SetProperty(ref _dataTypeMapping, value); }
        }

        /// <summary>
        /// Required connection properties for this source type
        /// </summary>
        [Newtonsoft.Json.JsonProperty("connectionProperties", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<ConnectionProperty> ConnectionProperties    {
            get { return _connectionProperties; }
            set { SetProperty(ref _connectionProperties, value); }
        }

    }

    /// <summary>
    /// Used to reference from any entity to a `Property`.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "11.4.0.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class PropertyReference : Prism.Mvvm.BindableBase
    {
        private string _type;
        private string _value;


        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Type    {
            get { return _type; }
            set { SetProperty(ref _type, value); }
        }

        [Newtonsoft.Json.JsonProperty("value", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Value    {
            get { return _value; }
            set { SetProperty(ref _value, value); }
        }

    }

    /// <summary>
    /// Defines an external source of data to be loaded with datam8.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "11.4.0.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class DataSource : Prism.Mvvm.BindableBase
    {
        private string _name;
        private string _displayName;
        private string _description;
        private System.Collections.Generic.ICollection<PropertyReference> _properties;
        private string _type;
        private string _connectionString;
        private System.Collections.Generic.ICollection<SourceDataTypeMapping> _dataTypeMapping;
        private System.Collections.Generic.IDictionary<string, string> _extendedProperties;


        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Name    {
            get { return _name; }
            set { SetProperty(ref _name, value); }
        }

        [Newtonsoft.Json.JsonProperty("displayName", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string DisplayName    {
            get { return _displayName; }
            set { SetProperty(ref _displayName, value); }
        }

        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Description    {
            get { return _description; }
            set { SetProperty(ref _description, value); }
        }

        [Newtonsoft.Json.JsonProperty("properties", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<PropertyReference> Properties    {
            get { return _properties; }
            set { SetProperty(ref _properties, value); }
        }

        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Type    {
            get { return _type; }
            set { SetProperty(ref _type, value); }
        }

        [Newtonsoft.Json.JsonProperty("connectionString", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ConnectionString    {
            get { return _connectionString; }
            set { SetProperty(ref _connectionString, value); }
        }

        /// <summary>
        /// Optional data type mappings. If not specified, uses defaults from DataSourceTypes. Individual mappings override defaults.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("dataTypeMapping", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<SourceDataTypeMapping> DataTypeMapping    {
            get { return _dataTypeMapping; }
            set { SetProperty(ref _dataTypeMapping, value); }
        }

        /// <summary>
        /// Additional properties specific to the data source
        /// </summary>
        [Newtonsoft.Json.JsonProperty("extendedProperties", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.IDictionary<string, string> ExtendedProperties    {
            get { return _extendedProperties; }
            set { SetProperty(ref _extendedProperties, value); }
        }

    }
}