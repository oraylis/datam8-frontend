//----------------------
// <auto-generated>
//     Generated using the NJsonSchema v11.4.0.0 (Newtonsoft.Json v13.0.0.0) (http://NJsonSchema.org)
// </auto-generated>
//----------------------


namespace Dm8Data
{
    #pragma warning disable // Disable all warnings

    /// <summary>
    /// Defines a class of data type to configure which `DataType` properties are relevant for a specific type.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "11.4.0.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class DataTypeDefinition : Prism.Mvvm.BindableBase
    {
        private string _name;
        private string _displayName;
        private string _description;
        private bool _hasCharLen = false;
        private bool _hasPrecision = false;
        private bool _hasScale = false;
        private string _parquetType;
        private string _sqlType;


        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Name    {
            get { return _name; }
            set { SetProperty(ref _name, value); }
        }

        [Newtonsoft.Json.JsonProperty("displayName", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string DisplayName    {
            get { return _displayName; }
            set { SetProperty(ref _displayName, value); }
        }

        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Description    {
            get { return _description; }
            set { SetProperty(ref _description, value); }
        }

        [Newtonsoft.Json.JsonProperty("hasCharLen", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool HasCharLen    {
            get { return _hasCharLen; }
            set { SetProperty(ref _hasCharLen, value); }
        }

        [Newtonsoft.Json.JsonProperty("hasPrecision", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool HasPrecision    {
            get { return _hasPrecision; }
            set { SetProperty(ref _hasPrecision, value); }
        }

        [Newtonsoft.Json.JsonProperty("hasScale", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool HasScale    {
            get { return _hasScale; }
            set { SetProperty(ref _hasScale, value); }
        }

        /// <summary>
        /// The actual parquet data type that this datam8 internal type will map to.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("parquetType", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string ParquetType    {
            get { return _parquetType; }
            set { SetProperty(ref _parquetType, value); }
        }

        /// <summary>
        /// The atual sql data type that this datam8 internal type will map to.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("sqlType", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string SqlType    {
            get { return _sqlType; }
            set { SetProperty(ref _sqlType, value); }
        }

    }
}