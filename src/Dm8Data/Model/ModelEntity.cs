/* DataM8
 * Copyright (C) 2024-2025 ORAYLIS GmbH
 *
 * This file is part of DataM8.
 *
 * DataM8 is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * DataM8 is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program. If not, see <https://www.gnu.org/licenses/>.
 */

//----------------------
// <auto-generated>
//     Generated using the NJsonSchema v11.4.0.0 (Newtonsoft.Json v13.0.0.0) (http://NJsonSchema.org)
// </auto-generated>
//----------------------


namespace Dm8Data
{
    #pragma warning disable // Disable all warnings

    /// <summary>
    /// Describes an abstract way to point to and find entities with datam8.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "11.4.0.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class Locator : Prism.Mvvm.BindableBase
    {
        private string _entityType;
        private System.Collections.Generic.ICollection<string> _folders = new System.Collections.ObjectModel.Collection<string>();
        private string _entityName;


        [Newtonsoft.Json.JsonProperty("entityType", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string EntityType    {
            get { return _entityType; }
            set { SetProperty(ref _entityType, value); }
        }

        /// <summary>
        /// Hierarchical list of olders under the base-/modelpath. Order is relevant.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("folders", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<string> Folders    {
            get { return _folders; }
            set { SetProperty(ref _folders, value); }
        }

        /// <summary>
        /// Name property of the entity object.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("entityName", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string EntityName    {
            get { return _entityName; }
            set { SetProperty(ref _entityName, value); }
        }

    }

    /// <summary>
    /// Internal source definition to reference other entities within datam8.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "11.4.0.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class InternalModelSource : Prism.Mvvm.BindableBase
    {
        private int _sourceLocation;
        private System.Collections.Generic.ICollection<PropertyReference> _properties;
        private System.Collections.Generic.ICollection<SourceAttributeMapping> _mapping;


        [Newtonsoft.Json.JsonProperty("sourceLocation", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public int SourceLocation    {
            get { return _sourceLocation; }
            set { SetProperty(ref _sourceLocation, value); }
        }

        [Newtonsoft.Json.JsonProperty("properties", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<PropertyReference> Properties    {
            get { return _properties; }
            set { SetProperty(ref _properties, value); }
        }

        [Newtonsoft.Json.JsonProperty("mapping", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<SourceAttributeMapping> Mapping    {
            get { return _mapping; }
            set { SetProperty(ref _mapping, value); }
        }

    }

    /// <summary>
    /// Sources that point to external systems outside of datam8.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "11.4.0.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class ExternalModelSource : Prism.Mvvm.BindableBase
    {
        private string _dataSource;
        private string _sourceLocation;
        private System.Collections.Generic.ICollection<PropertyReference> _properties;
        private System.Collections.Generic.ICollection<SourceAttributeMapping> _mapping;


        [Newtonsoft.Json.JsonProperty("dataSource", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string DataSource    {
            get { return _dataSource; }
            set { SetProperty(ref _dataSource, value); }
        }

        [Newtonsoft.Json.JsonProperty("sourceLocation", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string SourceLocation    {
            get { return _sourceLocation; }
            set { SetProperty(ref _sourceLocation, value); }
        }

        [Newtonsoft.Json.JsonProperty("properties", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<PropertyReference> Properties    {
            get { return _properties; }
            set { SetProperty(ref _properties, value); }
        }

        [Newtonsoft.Json.JsonProperty("mapping", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<SourceAttributeMapping> Mapping    {
            get { return _mapping; }
            set { SetProperty(ref _mapping, value); }
        }

    }

    /// <summary>
    /// Map an attribute in the source to one in the current entity. May optionally contain an explicit source data type.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "11.4.0.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class SourceAttributeMapping : Prism.Mvvm.BindableBase
    {
        private string _targetName;
        private string _sourceName;
        private DataType _sourceDataType;
        private System.Collections.Generic.ICollection<PropertyReference> _properties;


        [Newtonsoft.Json.JsonProperty("targetName", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string TargetName    {
            get { return _targetName; }
            set { SetProperty(ref _targetName, value); }
        }

        [Newtonsoft.Json.JsonProperty("sourceName", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string SourceName    {
            get { return _sourceName; }
            set { SetProperty(ref _sourceName, value); }
        }

        [Newtonsoft.Json.JsonProperty("sourceDataType", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DataType SourceDataType    {
            get { return _sourceDataType; }
            set { SetProperty(ref _sourceDataType, value); }
        }

        [Newtonsoft.Json.JsonProperty("properties", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<PropertyReference> Properties    {
            get { return _properties; }
            set { SetProperty(ref _properties, value); }
        }

    }

    /// <summary>
    /// Key-Value pair parameters for customization of and entity-level attributes.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "11.4.0.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class ModelParameter : Prism.Mvvm.BindableBase
    {
        private string _name;
        private string _value;


        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Name    {
            get { return _name; }
            set { SetProperty(ref _name, value); }
        }

        [Newtonsoft.Json.JsonProperty("value", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Value    {
            get { return _value; }
            set { SetProperty(ref _value, value); }
        }

    }

    /// <summary>
    /// Describes a single transformation, either builtin or defined within the solution.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "11.4.0.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class ModelTransformation : Prism.Mvvm.BindableBase
    {
        private int _stepNo;
        private ModelTransformationKind _kind;
        private string _name;
        private System.Collections.Generic.ICollection<PropertyReference> _properties;
        private Function _function;


        [Newtonsoft.Json.JsonProperty("stepNo", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Range(1, int.MaxValue)]
        public int StepNo    {
            get { return _stepNo; }
            set { SetProperty(ref _stepNo, value); }
        }

        /// <summary>
        /// Type of transformation, either `builtin` or `function`.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("kind", Required = Newtonsoft.Json.Required.Always)]
        public ModelTransformationKind Kind    {
            get { return _kind; }
            set { SetProperty(ref _kind, value); }
        }

        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Name    {
            get { return _name; }
            set { SetProperty(ref _name, value); }
        }

        [Newtonsoft.Json.JsonProperty("properties", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<PropertyReference> Properties    {
            get { return _properties; }
            set { SetProperty(ref _properties, value); }
        }

        /// <summary>
        /// A transformation function defined in the scope of the current solution.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("function", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Function Function    {
            get { return _function; }
            set { SetProperty(ref _function, value); }
        }

    }

    /// <summary>
    /// Describes a single entity within datam8. Most commonly a database table.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "11.4.0.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class ModelEntity : Prism.Mvvm.BindableBase
    {
        private int _id;
        private string _name;
        private string _displayName;
        private string _description;
        private System.Collections.Generic.ICollection<ModelParameter> _parameters;
        private System.Collections.Generic.ICollection<Attribute> _attributes = new System.Collections.ObjectModel.Collection<Attribute>();
        private System.Collections.Generic.ICollection<PropertyReference> _properties;
        private System.Collections.Generic.ICollection<InternalModelSource> _sources = new System.Collections.ObjectModel.Collection<InternalModelSource>();
        private System.Collections.Generic.ICollection<ModelTransformation> _transformations = new System.Collections.ObjectModel.Collection<ModelTransformation>();


        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Always)]
        public int Id    {
            get { return _id; }
            set { SetProperty(ref _id, value); }
        }

        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Name    {
            get { return _name; }
            set { SetProperty(ref _name, value); }
        }

        [Newtonsoft.Json.JsonProperty("displayName", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string DisplayName    {
            get { return _displayName; }
            set { SetProperty(ref _displayName, value); }
        }

        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Description    {
            get { return _description; }
            set { SetProperty(ref _description, value); }
        }

        [Newtonsoft.Json.JsonProperty("parameters", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<ModelParameter> Parameters    {
            get { return _parameters; }
            set { SetProperty(ref _parameters, value); }
        }

        [Newtonsoft.Json.JsonProperty("attributes", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.MinLength(1)]
        public System.Collections.Generic.ICollection<Attribute> Attributes    {
            get { return _attributes; }
            set { SetProperty(ref _attributes, value); }
        }

        [Newtonsoft.Json.JsonProperty("properties", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<PropertyReference> Properties    {
            get { return _properties; }
            set { SetProperty(ref _properties, value); }
        }

        [Newtonsoft.Json.JsonProperty("sources", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<InternalModelSource> Sources    {
            get { return _sources; }
            set { SetProperty(ref _sources, value); }
        }

        /// <summary>
        /// List of transformations that will be executed in order of stepNo.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("transformations", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<ModelTransformation> Transformations    {
            get { return _transformations; }
            set { SetProperty(ref _transformations, value); }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "11.4.0.0 (Newtonsoft.Json v13.0.0.0)")]
    public enum ModelTransformationKind
    {

        [System.Runtime.Serialization.EnumMember(Value = @"builtin")]
        Builtin = 0,


        [System.Runtime.Serialization.EnumMember(Value = @"function")]
        Function = 1,


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "11.4.0.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class Function : Prism.Mvvm.BindableBase
    {
        private string _source;


        [Newtonsoft.Json.JsonProperty("source", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Source    {
            get { return _source; }
            set { SetProperty(ref _source, value); }
        }

    }
}