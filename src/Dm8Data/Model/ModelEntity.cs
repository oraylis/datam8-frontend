//----------------------
// <auto-generated>
//     Generated using the NJsonSchema v11.4.0.0 (Newtonsoft.Json v13.0.0.0) (http://NJsonSchema.org)
// </auto-generated>
//----------------------


namespace Dm8Data
{
    #pragma warning disable // Disable all warnings

    /// <summary>
    /// Describes an abstract way to point to and find entities with datam8.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "11.4.0.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class Locator : Prism.Mvvm.BindableBase
    {
        private string _zone;
        private System.Collections.Generic.ICollection<string> _folders = new System.Collections.ObjectModel.Collection<string>();
        private string _modelEntity;


        /// <summary>
        /// Reference to the top-level folder within the model folder.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("zone", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Zone    {
            get { return _zone; }
            set { SetProperty(ref _zone, value); }
        }

        /// <summary>
        /// Hierarchical list of olders under the zone. Order is relevant.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("folders", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<string> Folders    {
            get { return _folders; }
            set { SetProperty(ref _folders, value); }
        }

        /// <summary>
        /// Name property of the modelEntity object.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("modelEntity", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string ModelEntity    {
            get { return _modelEntity; }
            set { SetProperty(ref _modelEntity, value); }
        }

    }

    /// <summary>
    /// Internal source definition to reference other entities within datam8.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "11.4.0.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class InternalModelSource : Prism.Mvvm.BindableBase
    {
        private int _sourceLocation;
        private System.Collections.Generic.ICollection<PropertyReference> _properties;
        private System.Collections.Generic.ICollection<SourceAttributeMapping> _mapping;


        [Newtonsoft.Json.JsonProperty("sourceLocation", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public int SourceLocation    {
            get { return _sourceLocation; }
            set { SetProperty(ref _sourceLocation, value); }
        }

        [Newtonsoft.Json.JsonProperty("properties", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<PropertyReference> Properties    {
            get { return _properties; }
            set { SetProperty(ref _properties, value); }
        }

        [Newtonsoft.Json.JsonProperty("mapping", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<SourceAttributeMapping> Mapping    {
            get { return _mapping; }
            set { SetProperty(ref _mapping, value); }
        }

    }

    /// <summary>
    /// Sources that point to external systems outside of datam8.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "11.4.0.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class ExternalModelSource : Prism.Mvvm.BindableBase
    {
        private string _dataSource;
        private string _sourceLocation;
        private System.Collections.Generic.ICollection<PropertyReference> _properties;
        private System.Collections.Generic.ICollection<SourceAttributeMapping> _mapping;


        [Newtonsoft.Json.JsonProperty("dataSource", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string DataSource    {
            get { return _dataSource; }
            set { SetProperty(ref _dataSource, value); }
        }

        [Newtonsoft.Json.JsonProperty("sourceLocation", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string SourceLocation    {
            get { return _sourceLocation; }
            set { SetProperty(ref _sourceLocation, value); }
        }

        [Newtonsoft.Json.JsonProperty("properties", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<PropertyReference> Properties    {
            get { return _properties; }
            set { SetProperty(ref _properties, value); }
        }

        [Newtonsoft.Json.JsonProperty("mapping", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<SourceAttributeMapping> Mapping    {
            get { return _mapping; }
            set { SetProperty(ref _mapping, value); }
        }

    }

    /// <summary>
    /// Map an attribute in the source to one in the current entity. May optionally contain an explicit source data type.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "11.4.0.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class SourceAttributeMapping : Prism.Mvvm.BindableBase
    {
        private string _targetName;
        private string _sourceName;
        private DataType _sourceDataType;
        private System.Collections.Generic.ICollection<PropertyReference> _properties;


        [Newtonsoft.Json.JsonProperty("targetName", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string TargetName    {
            get { return _targetName; }
            set { SetProperty(ref _targetName, value); }
        }

        [Newtonsoft.Json.JsonProperty("sourceName", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string SourceName    {
            get { return _sourceName; }
            set { SetProperty(ref _sourceName, value); }
        }

        [Newtonsoft.Json.JsonProperty("sourceDataType", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DataType SourceDataType    {
            get { return _sourceDataType; }
            set { SetProperty(ref _sourceDataType, value); }
        }

        [Newtonsoft.Json.JsonProperty("properties", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<PropertyReference> Properties    {
            get { return _properties; }
            set { SetProperty(ref _properties, value); }
        }

    }

    /// <summary>
    /// Key-Value pair parameters for customization of and entity-level attributes.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "11.4.0.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class ModelParameter : Prism.Mvvm.BindableBase
    {
        private string _name;
        private string _value;


        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Name    {
            get { return _name; }
            set { SetProperty(ref _name, value); }
        }

        [Newtonsoft.Json.JsonProperty("value", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Value    {
            get { return _value; }
            set { SetProperty(ref _value, value); }
        }

    }

    /// <summary>
    /// Describes a single transformation, either builtin or defined within the solution.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "11.4.0.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class ModelTransformation : Prism.Mvvm.BindableBase
    {
        private int _stepNo;
        private ModelTransformationKind _kind;
        private string _name;
        private System.Collections.Generic.ICollection<PropertyReference> _properties;
        private Function _function;


        [Newtonsoft.Json.JsonProperty("stepNo", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Range(1, int.MaxValue)]
        public int StepNo    {
            get { return _stepNo; }
            set { SetProperty(ref _stepNo, value); }
        }

        /// <summary>
        /// Type of transformation, either `builtin` or `function`.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("kind", Required = Newtonsoft.Json.Required.Always)]
        public ModelTransformationKind Kind    {
            get { return _kind; }
            set { SetProperty(ref _kind, value); }
        }

        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Name    {
            get { return _name; }
            set { SetProperty(ref _name, value); }
        }

        [Newtonsoft.Json.JsonProperty("properties", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<PropertyReference> Properties    {
            get { return _properties; }
            set { SetProperty(ref _properties, value); }
        }

        /// <summary>
        /// A transformation function defined in the scope of the current solution.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("function", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Function Function    {
            get { return _function; }
            set { SetProperty(ref _function, value); }
        }

    }

    /// <summary>
    /// Used to reference from any entity to a `Property`.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "11.4.0.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class PropertyReference : Prism.Mvvm.BindableBase
    {
        private string _type;
        private string _value;


        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Type    {
            get { return _type; }
            set { SetProperty(ref _type, value); }
        }

        [Newtonsoft.Json.JsonProperty("value", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Value    {
            get { return _value; }
            set { SetProperty(ref _value, value); }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "11.4.0.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class Folder : Prism.Mvvm.BindableBase
    {
        private int _id;
        private string _name;
        private string _displayName;
        private string _description;
        private string _path;
        private System.Collections.Generic.ICollection<PropertyReference> _properties;


        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Always)]
        public int Id    {
            get { return _id; }
            set { SetProperty(ref _id, value); }
        }

        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Name    {
            get { return _name; }
            set { SetProperty(ref _name, value); }
        }

        [Newtonsoft.Json.JsonProperty("displayName", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string DisplayName    {
            get { return _displayName; }
            set { SetProperty(ref _displayName, value); }
        }

        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Description    {
            get { return _description; }
            set { SetProperty(ref _description, value); }
        }

        /// <summary>
        /// Path of this folder, if not set the current directory will be used.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("path", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Path    {
            get { return _path; }
            set { SetProperty(ref _path, value); }
        }

        [Newtonsoft.Json.JsonProperty("properties", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<PropertyReference> Properties    {
            get { return _properties; }
            set { SetProperty(ref _properties, value); }
        }

    }

    /// <summary>
    /// Defines for which type of entities a `PropertyType` is available for assignment.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "11.4.0.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class PropertyScope : Prism.Mvvm.BindableBase
    {
        private string _type;
        private bool _singleUsage = true;
        private bool _mandatory = false;


        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Type    {
            get { return _type; }
            set { SetProperty(ref _type, value); }
        }

        /// <summary>
        /// Defines if the `PropertyType` can only be assigned once to entities in this scope.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("singleUsage", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool SingleUsage    {
            get { return _singleUsage; }
            set { SetProperty(ref _singleUsage, value); }
        }

        [Newtonsoft.Json.JsonProperty("mandatory", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool Mandatory    {
            get { return _mandatory; }
            set { SetProperty(ref _mandatory, value); }
        }

    }

    /// <summary>
    /// Defines a group of Properties that are grouped together for selection purposes.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "11.4.0.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class PropertyType : Prism.Mvvm.BindableBase
    {
        private string _name;
        private string _displayName;
        private string _schema;
        private System.Collections.Generic.ICollection<PropertyScope> _scopes;


        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Name    {
            get { return _name; }
            set { SetProperty(ref _name, value); }
        }

        [Newtonsoft.Json.JsonProperty("displayName", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string DisplayName    {
            get { return _displayName; }
            set { SetProperty(ref _displayName, value); }
        }

        [Newtonsoft.Json.JsonProperty("schema", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Schema    {
            get { return _schema; }
            set { SetProperty(ref _schema, value); }
        }

        [Newtonsoft.Json.JsonProperty("scopes", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<PropertyScope> Scopes    {
            get { return _scopes; }
            set { SetProperty(ref _scopes, value); }
        }

    }

    /// <summary>
    /// A single globally available static attribute that can be referenced from other entities.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "11.4.0.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class Property : Prism.Mvvm.BindableBase
    {
        private string _name;
        private string _displayName;
        private bool _default = false;
        private string _type;
        private System.Collections.Generic.ICollection<PropertyReference> _properties;


        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Name    {
            get { return _name; }
            set { SetProperty(ref _name, value); }
        }

        [Newtonsoft.Json.JsonProperty("displayName", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string DisplayName    {
            get { return _displayName; }
            set { SetProperty(ref _displayName, value); }
        }

        [Newtonsoft.Json.JsonProperty("default", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool Default    {
            get { return _default; }
            set { SetProperty(ref _default, value); }
        }

        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Type    {
            get { return _type; }
            set { SetProperty(ref _type, value); }
        }

        [Newtonsoft.Json.JsonProperty("properties", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<PropertyReference> Properties    {
            get { return _properties; }
            set { SetProperty(ref _properties, value); }
        }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// Defines a high-level layer or zone, typically used to clearly seperate different states of data processing, e.g. bronze, silver, gold, semantic.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "11.4.0.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class Zone : Prism.Mvvm.BindableBase
    {
        private string _name;
        private string _targetName;
        private string _displayName;
        private string _localFolderName;


        /// <summary>
        /// Logical name of the zone (e.g., Raw, Core, Curated)
        /// </summary>
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Name    {
            get { return _name; }
            set { SetProperty(ref _name, value); }
        }

        /// <summary>
        /// Target system name for the zone (e.g., Bronze, Silver, Gold)
        /// </summary>
        [Newtonsoft.Json.JsonProperty("targetName", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string TargetName    {
            get { return _targetName; }
            set { SetProperty(ref _targetName, value); }
        }

        /// <summary>
        /// Human-readable display name
        /// </summary>
        [Newtonsoft.Json.JsonProperty("displayName", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string DisplayName    {
            get { return _displayName; }
            set { SetProperty(ref _displayName, value); }
        }

        /// <summary>
        /// Local folder name used in file system structure
        /// </summary>
        [Newtonsoft.Json.JsonProperty("localFolderName", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string LocalFolderName    {
            get { return _localFolderName; }
            set { SetProperty(ref _localFolderName, value); }
        }

    }

    /// <summary>
    /// Defines a class of data type to configure which `DataType` properties are relevant for a specific type.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "11.4.0.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class DataTypeDefinition : Prism.Mvvm.BindableBase
    {
        private string _name;
        private string _displayName;
        private string _description;
        private bool _hasCharLen = false;
        private bool _hasPrecision = false;
        private bool _hasScale = false;
        private string _parquetType;
        private string _sqlType;


        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Name    {
            get { return _name; }
            set { SetProperty(ref _name, value); }
        }

        [Newtonsoft.Json.JsonProperty("displayName", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string DisplayName    {
            get { return _displayName; }
            set { SetProperty(ref _displayName, value); }
        }

        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Description    {
            get { return _description; }
            set { SetProperty(ref _description, value); }
        }

        [Newtonsoft.Json.JsonProperty("hasCharLen", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool HasCharLen    {
            get { return _hasCharLen; }
            set { SetProperty(ref _hasCharLen, value); }
        }

        [Newtonsoft.Json.JsonProperty("hasPrecision", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool HasPrecision    {
            get { return _hasPrecision; }
            set { SetProperty(ref _hasPrecision, value); }
        }

        [Newtonsoft.Json.JsonProperty("hasScale", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool HasScale    {
            get { return _hasScale; }
            set { SetProperty(ref _hasScale, value); }
        }

        /// <summary>
        /// The actual parquet data type that this datam8 internal type will map to.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("parquetType", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string ParquetType    {
            get { return _parquetType; }
            set { SetProperty(ref _parquetType, value); }
        }

        /// <summary>
        /// The atual sql data type that this datam8 internal type will map to.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("sqlType", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string SqlType    {
            get { return _sqlType; }
            set { SetProperty(ref _sqlType, value); }
        }

    }

    /// <summary>
    /// Defines groups of data sources that base on their technology, e.g. `SqlServer` or `Oracle`
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "11.4.0.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class DataSourceType : Prism.Mvvm.BindableBase
    {
        private string _name;
        private string _displayName;
        private string _description;
        private System.Collections.Generic.ICollection<SourceDataTypeMapping> _dataTypeMapping = new System.Collections.ObjectModel.Collection<SourceDataTypeMapping>();
        private System.Collections.Generic.ICollection<ConnectionProperty> _connectionProperties;


        /// <summary>
        /// Name of the data source type (e.g., SqlDataSource, LakeSource)
        /// </summary>
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Name    {
            get { return _name; }
            set { SetProperty(ref _name, value); }
        }

        /// <summary>
        /// Human-readable display name
        /// </summary>
        [Newtonsoft.Json.JsonProperty("displayName", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string DisplayName    {
            get { return _displayName; }
            set { SetProperty(ref _displayName, value); }
        }

        /// <summary>
        /// Description of the data source type
        /// </summary>
        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Description    {
            get { return _description; }
            set { SetProperty(ref _description, value); }
        }

        /// <summary>
        /// Default data type mappings for this source type
        /// </summary>
        [Newtonsoft.Json.JsonProperty("dataTypeMapping", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.MinLength(1)]
        public System.Collections.Generic.ICollection<SourceDataTypeMapping> DataTypeMapping    {
            get { return _dataTypeMapping; }
            set { SetProperty(ref _dataTypeMapping, value); }
        }

        /// <summary>
        /// Required connection properties for this source type
        /// </summary>
        [Newtonsoft.Json.JsonProperty("connectionProperties", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<ConnectionProperty> ConnectionProperties    {
            get { return _connectionProperties; }
            set { SetProperty(ref _connectionProperties, value); }
        }

    }

    /// <summary>
    /// Defines ...
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "11.4.0.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class DataModule : Prism.Mvvm.BindableBase
    {
        private string _name;
        private string _displayName;
        private string _description;
        private System.Collections.Generic.ICollection<PropertyReference> _properties;


        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Name    {
            get { return _name; }
            set { SetProperty(ref _name, value); }
        }

        [Newtonsoft.Json.JsonProperty("displayName", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string DisplayName    {
            get { return _displayName; }
            set { SetProperty(ref _displayName, value); }
        }

        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Description    {
            get { return _description; }
            set { SetProperty(ref _description, value); }
        }

        [Newtonsoft.Json.JsonProperty("properties", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<PropertyReference> Properties    {
            get { return _properties; }
            set { SetProperty(ref _properties, value); }
        }

    }

    /// <summary>
    /// Defines ...
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "11.4.0.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class DataProduct : Prism.Mvvm.BindableBase
    {
        private string _name;
        private string _displayName;
        private string _description;
        private System.Collections.Generic.ICollection<PropertyReference> _properties;
        private System.Collections.Generic.ICollection<DataModule> _dataModules = new System.Collections.ObjectModel.Collection<DataModule>();


        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Name    {
            get { return _name; }
            set { SetProperty(ref _name, value); }
        }

        [Newtonsoft.Json.JsonProperty("displayName", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string DisplayName    {
            get { return _displayName; }
            set { SetProperty(ref _displayName, value); }
        }

        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Description    {
            get { return _description; }
            set { SetProperty(ref _description, value); }
        }

        [Newtonsoft.Json.JsonProperty("properties", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<PropertyReference> Properties    {
            get { return _properties; }
            set { SetProperty(ref _properties, value); }
        }

        [Newtonsoft.Json.JsonProperty("dataModules", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.MinLength(1)]
        public System.Collections.Generic.ICollection<DataModule> DataModules    {
            get { return _dataModules; }
            set { SetProperty(ref _dataModules, value); }
        }

    }

    /// <summary>
    /// Defines abstract business orientated attribute definitions, e.g. an email address
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "11.4.0.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class AttributeType : Prism.Mvvm.BindableBase
    {
        private string _name;
        private string _displayName;
        private string _description;
        private string _defaultType;
        private int _defaultLength;
        private int _defaultPrecision;
        private int _defaultScale;
        private AttributeTypeHasUnit _hasUnit;
        private bool _canBeInRelation = false;
        private bool _isDefaultProperty = false;


        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Name    {
            get { return _name; }
            set { SetProperty(ref _name, value); }
        }

        [Newtonsoft.Json.JsonProperty("displayName", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string DisplayName    {
            get { return _displayName; }
            set { SetProperty(ref _displayName, value); }
        }

        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Description    {
            get { return _description; }
            set { SetProperty(ref _description, value); }
        }

        [Newtonsoft.Json.JsonProperty("defaultType", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string DefaultType    {
            get { return _defaultType; }
            set { SetProperty(ref _defaultType, value); }
        }

        [Newtonsoft.Json.JsonProperty("defaultLength", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int DefaultLength    {
            get { return _defaultLength; }
            set { SetProperty(ref _defaultLength, value); }
        }

        [Newtonsoft.Json.JsonProperty("defaultPrecision", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int DefaultPrecision    {
            get { return _defaultPrecision; }
            set { SetProperty(ref _defaultPrecision, value); }
        }

        [Newtonsoft.Json.JsonProperty("defaultScale", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int DefaultScale    {
            get { return _defaultScale; }
            set { SetProperty(ref _defaultScale, value); }
        }

        /// <summary>
        /// Defines if an attribute should define a unit, e.g. `Physical` for weight or `Currency` for price.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("hasUnit", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public AttributeTypeHasUnit HasUnit    {
            get { return _hasUnit; }
            set { SetProperty(ref _hasUnit, value); }
        }

        [Newtonsoft.Json.JsonProperty("canBeInRelation", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool CanBeInRelation    {
            get { return _canBeInRelation; }
            set { SetProperty(ref _canBeInRelation, value); }
        }

        [Newtonsoft.Json.JsonProperty("isDefaultProperty", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool IsDefaultProperty    {
            get { return _isDefaultProperty; }
            set { SetProperty(ref _isDefaultProperty, value); }
        }

    }

    /// <summary>
    /// A mapping of datatypes name in the source to datam8 internal datatype names.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "11.4.0.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class SourceDataTypeMapping : Prism.Mvvm.BindableBase
    {
        private string _sourceType;
        private string _targetType;


        /// <summary>
        /// Source system data type
        /// </summary>
        [Newtonsoft.Json.JsonProperty("sourceType", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string SourceType    {
            get { return _sourceType; }
            set { SetProperty(ref _sourceType, value); }
        }

        /// <summary>
        /// Target system data type
        /// </summary>
        [Newtonsoft.Json.JsonProperty("targetType", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string TargetType    {
            get { return _targetType; }
            set { SetProperty(ref _targetType, value); }
        }

    }

    /// <summary>
    /// A property or setting defined by a data source type, which is then available when defining concret data sources.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "11.4.0.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class ConnectionProperty : Prism.Mvvm.BindableBase
    {
        private string _name;
        private bool _required;
        private string _description;


        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Name    {
            get { return _name; }
            set { SetProperty(ref _name, value); }
        }

        [Newtonsoft.Json.JsonProperty("required", Required = Newtonsoft.Json.Required.Always)]
        public bool Required    {
            get { return _required; }
            set { SetProperty(ref _required, value); }
        }

        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Description    {
            get { return _description; }
            set { SetProperty(ref _description, value); }
        }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// Defines an external source of data to be loaded with datam8.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "11.4.0.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class DataSource : Prism.Mvvm.BindableBase
    {
        private string _name;
        private string _displayName;
        private string _description;
        private System.Collections.Generic.ICollection<PropertyReference> _properties;
        private string _type;
        private string _connectionString;
        private System.Collections.Generic.ICollection<SourceDataTypeMapping> _dataTypeMapping;
        private System.Collections.Generic.IDictionary<string, string> _extendedProperties;


        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Name    {
            get { return _name; }
            set { SetProperty(ref _name, value); }
        }

        [Newtonsoft.Json.JsonProperty("displayName", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string DisplayName    {
            get { return _displayName; }
            set { SetProperty(ref _displayName, value); }
        }

        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Description    {
            get { return _description; }
            set { SetProperty(ref _description, value); }
        }

        [Newtonsoft.Json.JsonProperty("properties", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<PropertyReference> Properties    {
            get { return _properties; }
            set { SetProperty(ref _properties, value); }
        }

        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Type    {
            get { return _type; }
            set { SetProperty(ref _type, value); }
        }

        [Newtonsoft.Json.JsonProperty("connectionString", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ConnectionString    {
            get { return _connectionString; }
            set { SetProperty(ref _connectionString, value); }
        }

        /// <summary>
        /// Optional data type mappings. If not specified, uses defaults from DataSourceTypes. Individual mappings override defaults.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("dataTypeMapping", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<SourceDataTypeMapping> DataTypeMapping    {
            get { return _dataTypeMapping; }
            set { SetProperty(ref _dataTypeMapping, value); }
        }

        /// <summary>
        /// Additional properties specific to the data source
        /// </summary>
        [Newtonsoft.Json.JsonProperty("extendedProperties", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.IDictionary<string, string> ExtendedProperties    {
            get { return _extendedProperties; }
            set { SetProperty(ref _extendedProperties, value); }
        }

    }

    /// <summary>
    /// An attribute of a model entity.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "11.4.0.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class Attribute : Prism.Mvvm.BindableBase
    {
        private int _ordinalNumber;
        private string _name;
        private string _displayName;
        private string _description;
        private string _attributeType;
        private DataType _dataType = new DataType();
        private bool _isBusinessKey = false;
        private AttributeHistory _history;
        private string _unit;
        private System.Collections.Generic.ICollection<string> _refactorNames;
        private System.DateTimeOffset _dateModified;
        private System.DateTimeOffset _dateDeleted;
        private System.DateTimeOffset _dateAdded;
        private System.Collections.Generic.ICollection<PropertyReference> _properties;


        [Newtonsoft.Json.JsonProperty("ordinalNumber", Required = Newtonsoft.Json.Required.Always)]
        public int OrdinalNumber    {
            get { return _ordinalNumber; }
            set { SetProperty(ref _ordinalNumber, value); }
        }

        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Name    {
            get { return _name; }
            set { SetProperty(ref _name, value); }
        }

        [Newtonsoft.Json.JsonProperty("displayName", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string DisplayName    {
            get { return _displayName; }
            set { SetProperty(ref _displayName, value); }
        }

        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Description    {
            get { return _description; }
            set { SetProperty(ref _description, value); }
        }

        [Newtonsoft.Json.JsonProperty("attributeType", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string AttributeType    {
            get { return _attributeType; }
            set { SetProperty(ref _attributeType, value); }
        }

        [Newtonsoft.Json.JsonProperty("dataType", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public DataType DataType    {
            get { return _dataType; }
            set { SetProperty(ref _dataType, value); }
        }

        [Newtonsoft.Json.JsonProperty("isBusinessKey", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool IsBusinessKey    {
            get { return _isBusinessKey; }
            set { SetProperty(ref _isBusinessKey, value); }
        }

        /// <summary>
        /// Defines how an attribute in a slowly chaning dimension should behave.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("history", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public AttributeHistory History    {
            get { return _history; }
            set { SetProperty(ref _history, value); }
        }

        [Newtonsoft.Json.JsonProperty("unit", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Unit    {
            get { return _unit; }
            set { SetProperty(ref _unit, value); }
        }

        [Newtonsoft.Json.JsonProperty("refactorNames", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string> RefactorNames    {
            get { return _refactorNames; }
            set { SetProperty(ref _refactorNames, value); }
        }

        [Newtonsoft.Json.JsonProperty("dateModified", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset DateModified    {
            get { return _dateModified; }
            set { SetProperty(ref _dateModified, value); }
        }

        [Newtonsoft.Json.JsonProperty("dateDeleted", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset DateDeleted    {
            get { return _dateDeleted; }
            set { SetProperty(ref _dateDeleted, value); }
        }

        [Newtonsoft.Json.JsonProperty("dateAdded", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public System.DateTimeOffset DateAdded    {
            get { return _dateAdded; }
            set { SetProperty(ref _dateAdded, value); }
        }

        [Newtonsoft.Json.JsonProperty("properties", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<PropertyReference> Properties    {
            get { return _properties; }
            set { SetProperty(ref _properties, value); }
        }

    }

    /// <summary>
    /// Describes a single entity within datam8. Most commonly a database table.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "11.4.0.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class ModelEntity : Prism.Mvvm.BindableBase
    {
        private int _id;
        private string _name;
        private string _displayName;
        private string _description;
        private System.Collections.Generic.ICollection<ModelParameter> _parameters;
        private System.Collections.Generic.ICollection<Attribute> _attributes = new System.Collections.ObjectModel.Collection<Attribute>();
        private System.Collections.Generic.ICollection<PropertyReference> _properties;
        private System.Collections.Generic.ICollection<InternalModelSource> _sources = new System.Collections.ObjectModel.Collection<InternalModelSource>();
        private System.Collections.Generic.ICollection<ModelTransformation> _transformations = new System.Collections.ObjectModel.Collection<ModelTransformation>();


        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Always)]
        public int Id    {
            get { return _id; }
            set { SetProperty(ref _id, value); }
        }

        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Name    {
            get { return _name; }
            set { SetProperty(ref _name, value); }
        }

        [Newtonsoft.Json.JsonProperty("displayName", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string DisplayName    {
            get { return _displayName; }
            set { SetProperty(ref _displayName, value); }
        }

        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Description    {
            get { return _description; }
            set { SetProperty(ref _description, value); }
        }

        [Newtonsoft.Json.JsonProperty("parameters", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<ModelParameter> Parameters    {
            get { return _parameters; }
            set { SetProperty(ref _parameters, value); }
        }

        [Newtonsoft.Json.JsonProperty("attributes", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.MinLength(1)]
        public System.Collections.Generic.ICollection<Attribute> Attributes    {
            get { return _attributes; }
            set { SetProperty(ref _attributes, value); }
        }

        [Newtonsoft.Json.JsonProperty("properties", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<PropertyReference> Properties    {
            get { return _properties; }
            set { SetProperty(ref _properties, value); }
        }

        [Newtonsoft.Json.JsonProperty("sources", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.MinLength(1)]
        public System.Collections.Generic.ICollection<InternalModelSource> Sources    {
            get { return _sources; }
            set { SetProperty(ref _sources, value); }
        }

        /// <summary>
        /// List of transformations that will be executed in order of stepNo.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("transformations", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.MinLength(1)]
        public System.Collections.Generic.ICollection<ModelTransformation> Transformations    {
            get { return _transformations; }
            set { SetProperty(ref _transformations, value); }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "11.4.0.0 (Newtonsoft.Json v13.0.0.0)")]
    public enum ModelTransformationKind
    {

        [System.Runtime.Serialization.EnumMember(Value = @"builtin")]
        Builtin = 0,


        [System.Runtime.Serialization.EnumMember(Value = @"function")]
        Function = 1,


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "11.4.0.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class Function : Prism.Mvvm.BindableBase
    {
        private string _source;


        [Newtonsoft.Json.JsonProperty("source", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Source    {
            get { return _source; }
            set { SetProperty(ref _source, value); }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "11.4.0.0 (Newtonsoft.Json v13.0.0.0)")]
    public enum AttributeTypeHasUnit
    {

        [System.Runtime.Serialization.EnumMember(Value = @"NoUnit")]
        NoUnit = 0,


        [System.Runtime.Serialization.EnumMember(Value = @"Physical")]
        Physical = 1,


        [System.Runtime.Serialization.EnumMember(Value = @"Currency")]
        Currency = 2,


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "11.4.0.0 (Newtonsoft.Json v13.0.0.0)")]
    public enum AttributeHistory
    {

        [System.Runtime.Serialization.EnumMember(Value = @"SCD0")]
        SCD0 = 0,


        [System.Runtime.Serialization.EnumMember(Value = @"SCD1")]
        SCD1 = 1,


        [System.Runtime.Serialization.EnumMember(Value = @"SCD2")]
        SCD2 = 2,


        [System.Runtime.Serialization.EnumMember(Value = @"SCD3")]
        SCD3 = 3,


        [System.Runtime.Serialization.EnumMember(Value = @"SCD4")]
        SCD4 = 4,


    }
}