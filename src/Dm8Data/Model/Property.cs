/* DataM8
 * Copyright (C) 2024-2025 ORAYLIS GmbH
 *
 * This file is part of DataM8.
 *
 * DataM8 is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * DataM8 is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program. If not, see <https://www.gnu.org/licenses/>.
 */

//----------------------
// <auto-generated>
//     Generated using the NJsonSchema v11.4.0.0 (Newtonsoft.Json v13.0.0.0) (http://NJsonSchema.org)
// </auto-generated>
//----------------------


namespace Dm8Data
{
    #pragma warning disable // Disable all warnings

    /// <summary>
    /// Used to reference from any entity to a `Property`.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "11.4.0.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class PropertyReference : Prism.Mvvm.BindableBase
    {
        private string _property;
        private string _value;


        [Newtonsoft.Json.JsonProperty("property", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Property    {
            get { return _property; }
            set { SetProperty(ref _property, value); }
        }

        [Newtonsoft.Json.JsonProperty("value", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Value    {
            get { return _value; }
            set { SetProperty(ref _value, value); }
        }

    }

    /// <summary>
    /// Defines for which type of entities a `PropertyType` is available for assignment.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "11.4.0.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class PropertyScope : Prism.Mvvm.BindableBase
    {
        private string _type;
        private bool _singleUsage = true;
        private bool _mandatory = false;


        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Type    {
            get { return _type; }
            set { SetProperty(ref _type, value); }
        }

        /// <summary>
        /// Defines if the `PropertyType` can only be assigned once to entities in this scope.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("singleUsage", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool SingleUsage    {
            get { return _singleUsage; }
            set { SetProperty(ref _singleUsage, value); }
        }

        [Newtonsoft.Json.JsonProperty("mandatory", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool Mandatory    {
            get { return _mandatory; }
            set { SetProperty(ref _mandatory, value); }
        }

    }

    /// <summary>
    /// A single globally available static property value that can be referenced from other entities.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "11.4.0.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class PropertyValue : Prism.Mvvm.BindableBase
    {
        private string _name;
        private string _displayName;
        private bool _default = false;
        private string _property;
        private System.Collections.Generic.ICollection<PropertyReference> _properties;


        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Name    {
            get { return _name; }
            set { SetProperty(ref _name, value); }
        }

        [Newtonsoft.Json.JsonProperty("displayName", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string DisplayName    {
            get { return _displayName; }
            set { SetProperty(ref _displayName, value); }
        }

        [Newtonsoft.Json.JsonProperty("default", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool Default    {
            get { return _default; }
            set { SetProperty(ref _default, value); }
        }

        /// <summary>
        /// The name of the associated property.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("property", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Property    {
            get { return _property; }
            set { SetProperty(ref _property, value); }
        }

        [Newtonsoft.Json.JsonProperty("properties", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<PropertyReference> Properties    {
            get { return _properties; }
            set { SetProperty(ref _properties, value); }
        }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// Defines properties for which specific pre-selectable values can created.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "11.4.0.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class Property : Prism.Mvvm.BindableBase
    {
        private string _name;
        private string _displayName;
        private string _schema;
        private System.Collections.Generic.ICollection<PropertyScope> _scopes;


        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Name    {
            get { return _name; }
            set { SetProperty(ref _name, value); }
        }

        [Newtonsoft.Json.JsonProperty("displayName", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string DisplayName    {
            get { return _displayName; }
            set { SetProperty(ref _displayName, value); }
        }

        [Newtonsoft.Json.JsonProperty("schema", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Schema    {
            get { return _schema; }
            set { SetProperty(ref _schema, value); }
        }

        [Newtonsoft.Json.JsonProperty("scopes", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<PropertyScope> Scopes    {
            get { return _scopes; }
            set { SetProperty(ref _scopes, value); }
        }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }
}