/* DataM8
 * Copyright (C) 2024-2025 ORAYLIS GmbH
 *
 * This file is part of DataM8.
 *
 * DataM8 is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * DataM8 is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program. If not, see <https://www.gnu.org/licenses/>.
 */

//----------------------
// <auto-generated>
//     Generated using the NJsonSchema v11.4.0.0 (Newtonsoft.Json v13.0.0.0) (http://NJsonSchema.org)
// </auto-generated>
//----------------------


namespace Dm8Data
{
    #pragma warning disable // Disable all warnings

    /// <summary>
    /// Defines a target that can be selected when using the generator.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "11.4.0.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class GeneratorTarget : Prism.Mvvm.BindableBase
    {
        private string _name;
        private bool _isDefault = false;
        private string _sourcePath;
        private string _outputPath;


        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Name    {
            get { return _name; }
            set { SetProperty(ref _name, value); }
        }

        [Newtonsoft.Json.JsonProperty("isDefault", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool IsDefault    {
            get { return _isDefault; }
            set { SetProperty(ref _isDefault, value); }
        }

        /// <summary>
        /// A path relative to the folder where the the solution file lies.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("sourcePath", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string SourcePath    {
            get { return _sourcePath; }
            set { SetProperty(ref _sourcePath, value); }
        }

        /// <summary>
        /// A path relative to the folder where the the solution file lies.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("outputPath", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string OutputPath    {
            get { return _outputPath; }
            set { SetProperty(ref _outputPath, value); }
        }

    }

    /// <summary>
    /// A definition to hold various settings for use in the frontend or the generator.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "11.4.0.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class Solution : Prism.Mvvm.BindableBase
    {
        private string _schemaVersion;
        private string _modelPath = "Model";
        private string _basePath = "Base";
        private string _diagramPath;
        private System.Collections.Generic.ICollection<GeneratorTarget> _generatorTargets = new System.Collections.ObjectModel.Collection<GeneratorTarget>();


        /// <summary>
        /// Version of the schema for validation and migration support.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("schemaVersion", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string SchemaVersion    {
            get { return _schemaVersion; }
            set { SetProperty(ref _schemaVersion, value); }
        }

        /// <summary>
        /// Root path for model entities, replacing zone-specific paths.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("modelPath", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string ModelPath    {
            get { return _modelPath; }
            set { SetProperty(ref _modelPath, value); }
        }

        /// <summary>
        /// Path where base entity files like DataSources are stored.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("basePath", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string BasePath    {
            get { return _basePath; }
            set { SetProperty(ref _basePath, value); }
        }

        /// <summary>
        /// tbd
        /// </summary>
        [Newtonsoft.Json.JsonProperty("diagramPath", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string DiagramPath    {
            get { return _diagramPath; }
            set { SetProperty(ref _diagramPath, value); }
        }

        /// <summary>
        /// Targets available to the generator when not explicitly specifying it.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("generatorTargets", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.MinLength(1)]
        public System.Collections.Generic.ICollection<GeneratorTarget> GeneratorTargets    {
            get { return _generatorTargets; }
            set { SetProperty(ref _generatorTargets, value); }
        }

    }
}