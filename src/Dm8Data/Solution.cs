/* DataM8
 * Copyright (C) 2024-2025 ORAYLIS GmbH
 *
 * This file is part of DataM8.
 *
 * DataM8 is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * DataM8 is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program. If not, see <https://www.gnu.org/licenses/>.
 */

// Generated by DataM8
//----------------------
// <auto-generated>
//     Generated using the NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.3.0) (http://NJsonSchema.org)
// </auto-generated>
//----------------------


namespace Dm8Data
{
    #pragma warning disable // Disable all warnings

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "11.1.0.0 (Newtonsoft.Json v13.0.3.0)")]
    public partial class Solution : Prism.Mvvm.BindableBase
    {
        private string _basePath = "Base";
        private string _rawPath = "Raw";
        private string _stagingPath = "Staging";
        private string _corePath = "Core";
        private string _curatedPath = "Curated";
        private string _generatePath = "Generate";
        private string _diagramPath = "Diagram";
        private string _outputPath = "Output";
        private AreaTypes _areaTypes = new AreaTypes();

        [Newtonsoft.Json.JsonProperty("basePath", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string BasePath
        {
            get { return _basePath; }

            set { SetProperty(ref _basePath, value); }
        }

        [Newtonsoft.Json.JsonProperty("rawPath", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string RawPath
        {
            get { return _rawPath; }

            set { SetProperty(ref _rawPath, value); }
        }

        [Newtonsoft.Json.JsonProperty("stagingPath", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string StagingPath
        {
            get { return _stagingPath; }

            set { SetProperty(ref _stagingPath, value); }
        }

        [Newtonsoft.Json.JsonProperty("corePath", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string CorePath
        {
            get { return _corePath; }

            set { SetProperty(ref _corePath, value); }
        }

        [Newtonsoft.Json.JsonProperty("curatedPath", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string CuratedPath
        {
            get { return _curatedPath; }

            set { SetProperty(ref _curatedPath, value); }
        }

        [Newtonsoft.Json.JsonProperty("generatePath", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string GeneratePath
        {
            get { return _generatePath; }

            set { SetProperty(ref _generatePath, value); }
        }

        [Newtonsoft.Json.JsonProperty("diagramPath", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string DiagramPath
        {
            get { return _diagramPath; }

            set { SetProperty(ref _diagramPath, value); }
        }

        [Newtonsoft.Json.JsonProperty("outputPath", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string OutputPath
        {
            get { return _outputPath; }

            set { SetProperty(ref _outputPath, value); }
        }

        [Newtonsoft.Json.JsonProperty("AreaTypes", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public AreaTypes AreaTypes
        {
            get { return _areaTypes; }

            set { SetProperty(ref _areaTypes, value); }
        }



        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "11.1.0.0 (Newtonsoft.Json v13.0.3.0)")]
    public partial class AreaTypes : Prism.Mvvm.BindableBase
    {
        private string _raw = "Raw";
        private string _stage = "Stage";
        private string _core = "Core";
        private string _curated = "Curated";
        private string _diagram = "Diagram";

        [Newtonsoft.Json.JsonProperty("Raw", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Raw
        {
            get { return _raw; }

            set { SetProperty(ref _raw, value); }
        }

        [Newtonsoft.Json.JsonProperty("Stage", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Stage
        {
            get { return _stage; }

            set { SetProperty(ref _stage, value); }
        }

        [Newtonsoft.Json.JsonProperty("Core", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Core
        {
            get { return _core; }

            set { SetProperty(ref _core, value); }
        }

        [Newtonsoft.Json.JsonProperty("Curated", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Curated
        {
            get { return _curated; }

            set { SetProperty(ref _curated, value); }
        }

        [Newtonsoft.Json.JsonProperty("Diagram", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Diagram
        {
            get { return _diagram; }

            set { SetProperty(ref _diagram, value); }
        }



        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }
}
